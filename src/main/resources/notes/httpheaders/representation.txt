1. 표현
    [내용]
        a) 리소스를 표현하는 것이다. (실제 http로 전송하는 데이터)
            >> 리소스를 HTML로 표현한, JSON으로 표현한다 등등
            >> Content-type : 표현의 데이터 형식
                ** text/html; charset=utf-8
                ** application/json; (기본이 UTF-8임)
                ** image/png;
            >> Content-Encoding : 표현 데이터의 압축 방식
                ** gzip, deflate, identity (뭘로 압축되어있니??)
            >> Content-language : 표현 데이터의 자연언어
                ** ko, en, en-US
            >> Content-Length :표현 데이터의 길이
                ** 바이트 단위인 표현데이터의 길이

2. 협상 (Content negotiation)
    [내용]
        a) 클라이언트가 선호하는 표현 요청 (여러 개에 대해 우선순위가 존재한다)
            ** 우선순위는 0 ~ 1이며 Quality Value라고 한다 (약자로 q)
            ** 구체적인 것에 우선한다.
            >> Accept : 클라이언트가 선호하는 미디어 타입 전달
            >> Accept-Charset : 클라이언트가 선호하는 문자 인코딩
            >> Accept-Encoding : 클라이언트가 선호하는 압축 인코딩
            >> Accept-Language : 클라이언트가 선호하는 언어

3. 전송방식
    [내용]
        a) 단순 전송 - Content-Length를 전체 다 작성
        b) 압축 전송 - Content-Encoding / Content-Length
        c) 분할 전송 - Transfer-Encoding (용량이 커서 나눠서 전송할 때, Content-Length를 넣으면 안된다.)
            >> Transfer-Encoding: chunked
        d) 범위 전송 - Range, Content-Range
            >> Content-Range: bytes 1001-2000 / 2000

4. 일반정보
    [내용]
        a) From : 유저의 이메일 정보
        b) Referer : 이전 URL 표시
        c) user-agent : 클라이언트의 정보
        d) server : 요청을 처리하는 origin 서버의 정보 (중간의 노드 서버가 아님)
        e) date : 응답에서만 사용하는 메시지가 발생한 날짜와 시간

5. 특별한 정보
    [내용]
        a) Host : 요청한 호스트 정보 (도메인) - 요청에서 사용하는 필수값 헤더
            >> IP + 포트
        b) Location : 페이지 리다이렉션 (리다이렉트 시 Location 위치로 이동함)

6. 쿠키 (세션은 서버 쪽임)
    [내용]
        a) Set-Cookie : 서버에서 클라이언트로 쿠키 전달 (응답 시)
        b) Cookie : 클라이언트가 서버에서 받은 쿠키를 저장하고, HTTP 요청 시 서버로 전달
        c) 웹 브라우저의 쿠키 저장소가 있음 (근데 웹브라우저가 달라지면, 쿠키도 무효가 될까? >> 그렇다)
        d) 쿠키는 매번 서버에 전송된다 (네트워크 트래픽 발생한다)
        e) 그러므로 서버에 전송하지 않는 클라이언트 저장소는 localStorage, sessionStorage 참고하자
        f) 쿠키의 생명주기를 관리할 수 있다. (세션쿠키 - 브라우저가 종료되면 끝 / 영속쿠키 - 사용자 만료일자를 적용가능)
        g) 쿠키를 적용할 수 있는 도메인을 설정할 수 있다 (특정 도메인에만 쿠키 설정가능)
        h) 특정 경로의 하위 경로 페이지만 쿠키 접근 가능 >> path로 적용 가능
        i) 쿠키 보안
            ** secure : 쿠키는 http, https 구분 없이 전송하지만 Secure를 적용하면 https 인 경우에만 전송
            ** HttpOnly : XSS 공격 방지, 자바스크립트 접근 불가
                ** XSS란? - 크로스 사이트 스크립트. 유효성 검사가 제대로 안될 때 스크립트에 값을 끼워넣어 공격하는 방법
                          - 그래서 클라이언트 쪽, 서버쪽 둘다 유효성 체크를 해야 한다.
                          - 스프링 시큐리티의 crsf 토큰으로써 해당 사이트에서 발생한 요청인지 악의적인 요청인지 구분하여 보안을 강화할 수 있다.
            ** SameSite : XSRF 공격 방지, 요청도메인과 쿠키에 설정된 도메인이 같은 경우에만 쿠키 전송
                ** XSRF란? - 웹 어플리케이션에서 정상 HTTP 요청과 비정상 HTTP요청을 구분 못할 때 악의적으로 스크립트를 구현하여 전송해도
                           - 서버쪽에서는 모두 받아들이는 경우 (공격자가 Form 태그를 만들어서 전송해도 아무 문제 없는 경우같은 예시가 있다)

7. 캐시 기본 동작
    [내용]
        a) 캐시가 없다면 네트워크를 통해서 계속 다운로드를 받거나 브라우저 로딩을 해야 한다.
        b) 서버에서 응답을 줄 때, 캐시를 적용하겠다는 의미로 cache-control 헤더 정보를 준다.
            >> 캐시는 브라우저 캐시에서 찾는다.

8. 검증헤더, 조건부 요청
    [내용]
        a) 캐시 시간 초과
            ** 캐시 시간이 초과되면 2가지 상황이 있다
                1) 서버에서 기존 데이터를 변경함
                2) 서버에서 기존 데이터를 변경하지 않음
        b) 검증헤더
            1) 데이터가 마지막으로 수정된 시간을 비교 (Last-Modified)
            2) 최종 수정 시간이 같으면 다시 웹브라우저의 캐시에서 꺼내 쓴다.
            3) 만약 Last-Modified로 수정된 시간이 같다면 HTTP Body를 비우고 브라우저 캐시를 사용한다.
                >> 이 때 응답코드는 304 Not Modified이다.

9. 검증헤더, 조건부요청 2
    [내용]
        a) 만약 수정시간이 다르지만, 실제 데이터 내용이 같다면??
        b) 검증헤더 : 캐시 데이터와 서버 데이터가 같은지 검증하는 데이터
            (Last-Modified, ETag)
        c) 조건부 요청 헤더
            >> If-Modified-Since <> Last-Modified
            >> If-None-Match <> ETag
            >> 조건을 만족하면 200 Ok 응답코드 반환
            >> 조건을 만족하지 않으면 304 Not Modified 응답코드 반환
        d) ETag(Entity Tag)
            1) 캐시용 데이터에 임의의 고유한 버전 이름을 적용
            2) 데이터가 변경되면 Hash를 적용하여 이름을 바꿈
            3) 단순히 ETag 가 같으면 유지, 다르면 다시 받기.

10. 캐시 헤더
    [내용]
        a) cache-control
            1) Max-age : 캐시를 얼마동안 유효하게 할거니?
            2) no-cache : 데이터는 캐시해도 되지만 origin 서버에 검증하고 사용 (if-modified를 항상 체크한다는 뜻임)
            3) no-store : 데이터에 민감한 정보가 있으므로 저장하면 안됨
        b) Expires : 캐시 만료일 지정 (Max-age는 초단위로 지정, Expires는 날짜를 지정)

11. 프록시 캐시
    [내용]
        a) 원 서버 접근
            1) Origin 서버 : 웹 브라우저와 Origin 서버 중간의 캐시서버를 도입
            2) 굳이 웹브라우저에서 Origin 서버에 접근하지 않아도, 캐시서버를 통해 데이터를 받아온다.
                >> 우리가 유투브를 빨리 보는 이유!! >> 사람들이 많이 보는 컨텐츠는 빠르나, 많이 안 보는 컨텐츠는 느린 이유!

        b) cache-control
            1) public : 응답이 캐시에 저장되어도 됨
            2) private : 응답이 해당 사용자만을 위한 것 (private 캐시에 저장해야 함)
                >> 로그인 정보가 캐시되면 큰일! 기본값이 private 이다.
            3) s-maxage : 프록시 캐시에만 적용되는 max-age
            4) age : 오리진 서버에서 응답 후 프록시 캐시 내에 머문 시간

12. 캐시 무효화 (특정 페이지는 캐시가 되면 안된다!! > 민감한 데이터)
    [내용]
        a) no-cache, no-store, must-revalidate를 넣어주면 캐시 무효화 됨
        b) no-cache : 데이터는 캐시해도 되지만 반드시 Origin 서버에서 검증 후 사용 (if-modified를 사용하거나 등등..)
        c) no-store : 그냥 캐시 안함
        d) must-revalidate : 캐시 만료 후 최조 조회 시 Origin 서버에서 검증

        ** must-revalidate 같은 경우 Origin 서버에 접근 시 오류가 발생하면 캐시 서버에 상관없이
            무조건 504 Gateway Timeout을 발생시켜서 오류 발생을 시킨다.

        e) 스프링에서는 CacheControl 객체를 이용 및 WebMvcConfigurer에서 max-age 적용가능
            >> 이것을 필터에서 구현할 수 도 있음
            >> 이것을 application.yml에서 구현할 수 도 있음

13. 서버 캐시 VS 브라우저 캐시
    1) 서버 캐시
        a) 컨텐츠 전송 네트워크 - CDN (Content delivery network / Content distribution network)
        b) 컨텐츠를 Origin 서버에서 매번 전송해주는 것이 아닌 Origin 서버의 데이터를 캐시해주는 서버를 뜻한다.
        c) 마치 jquery를 링크를 통해 import 해서 사용하는 방식!!

    2) 브라우저 캐시
        a) 개발자 모드에서 보면 from disk cache는 램으로부터 캐시된 데이터를 조회한다.
        b) 개발자 모드에서 보면 from memory cache1는 CPU의 캐시메모리로부터 캐시된 데이터를 조회한다.