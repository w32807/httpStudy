1. API URI 설계
    [요구사항 - 회원정보 관리 API를 만들어라]
        1) 회원 목록 조회, 단일 건 조회, 등록, 수정 ,삭제
        2) URI 설계
            a) 회원목록 조회 /read-member-list
            b) 회원 조회 /read-member-by-id
            c) 회원등록 /create-member
            d) 회원수정 /update-member
            e) 회원삭제 /delete-member

    [API URI 설계 고민]
        1) 회원이라는 개념 자체가 리소스다.
        2) 리소스를 식별하기만 하면 된다. -> 회원 리소스를 URI에 매핑
        3) URI 재설계
            a) GET - 회원목록 조회 /members
            b) GET - 회원 조회 /members/{id} -> 회원 조회 시, 여러 회원 중 회원을 식별할 id만 있으면 됨
            c) POST - 회원등록 /members -> 회원 등록 시, 여러 회원 중 회원을 식별할 id만 있으면 됨
            d) PUT,PATCH - 회원수정 /members/{id} -> 회원 수정 시, 여러 회원 중 회원을 식별할 id만 있으면 됨
            e) DELETE - 회원삭제 /members/{id} -> 회원 삭제 시, 여러 회원 중 회원을 식별할 id만 있으면 됨

            ** 계층구조상 상위를 컬렉션으로 보고, 복수단어 사용 권장 (member가 아닌 members를 쓰자)
            ** 구분을 위해 HTTP Method (행위)를 쓰는 것

2. HTTP Method
    1) GET - 리소스 조회
        a) 서버에 전달하고 싶은 데이터는 쿼리스트링(쿼리파라미터)을 통해서 전달.
        b) 메세지 바디에 데이터 전달을 할 수 있지만 지원하는 곳이 많지 않아서 권장 X
    2) POST - 요청 데이터 정리, 주로 등록에 사용
        a) 메세지 바디를 통해 요청 데이터 전달 (클라이언트에서 서버로 데이터 전달함)
        b) 서버는 클라이언트로부터 받은 데이터를 처리함
        c) 주로 전달된 데이터로 신규 리소스 등록 혹은 프로세스 처리에 사용
        d) POST 사용
            ** HTML 양식에 입력된 필드와 같은 데이터 블록을 데이터 처리 프로세스에 제공
                >> HTML FORM에 작성된 정보(데이터 블록)를 회원가입 로직(데이터 처리 프로세스)에 전달
            ** 게시판, 뉴스, 블로그 등에 메세지 게시
                >> 게시판 글쓰기, 댓글 달기
            ** 서버가 아직 식별하지 않은 새 리소스 생성
                >> 신규 주문 생성
            ** 기존 자원에 데이터 추가
                >> 한 문서 끝에 내용 추가하기
        e) 단순 데이터 변경이 아니라 프로세스를 처리해야 하는 경우 (컨트롤 URI - URI에 동작을 넣음)
            ** 이미 받은 주문을 배달 시작 프로세스로 처리하는 경우도 POST
        f) 다른 메서드로 처리하기 애매한 경우
            ** JSON으로 조회 데이터를 넘겨야 하는데 GET 메서드를 사용하기 어려운 경우
    3) PUT - 리소스를 완전 대체, 해당 리소스가 없으면 생성
        a) 리소스가 있으면 대체 (덮어쓰기)
    4) PATCH - 리소스 부분 변경
        a) 리소스가 있으면 부분 변경
    5) DELETE - 리소스 삭제
        a) 리소스 제거

3. HTTP 속성
    1) 안전 (Safe Methods) - 호출해도 리소스를 변경하지 않는다.
        a) GET - 여러 번 호출해도 조회용이기 때문에 안전
        b) POST, PUT, PATCH, DELETE - 리소스를 변경, 삭제하는 것이기 때문에 안전하지 않음
    2) 멱등 (Idempotent Methods)
        a) f(f(x)) = f(x)
        b) 한 번 호출하든 여러번 하든 결과는 같음
        c) GET, PUT, DELETE - 멱등함
        d) POST 멱등이 아님 - 그래서 PRG 패턴을 사용함 (POST - Redirect - GET)
    3) 캐시가능 (Cacheable Methods) - 응답결과를 캐시해서 사용 가능하니?
        a) GET, HEAD, POST, PATCH는 캐시 가능
        b) 실제는 GET, HEAD 정도만 캐시로 사용 (URL을 Key로하여 캐싱함)
        c) POST, PATCH는 본문내용(메세지 바디)까지 캐시 키로 고려해야 하는데 어려움

4. 클라이언트에서 서버로 데이터 전송
    1) 쿼리 파라미터(쿼리 스트링)을 통한 데이터 전송
        a) GET / 주로 정렬 필터 (검색어 등등)
    2) 메세지 바디를 통한 데이터 전송
        b) POST, PUT, PATCH / 회원 가입, 리소스 등록, 리소스 변경 등
    3) HTML FORM 전송은 GET, POST만 지원함 (직접 FORM - SUBMIT을 통해 파일 전송 가능)
    4) HTTP API로 데이터 전송
        a) HTML FORM 전송이 아닌 JSON으로 전송 가능
        b) 그냥 JSON으로 넣고 데이터 전송하면 됨
        c) 서버 <-> 서버 통신
        d) 아이폰, 안드로이드에서 서버로 전송
        e) AJAX 통신 (React, Vue js)
        f) POST, PUT, VueJs 같은 웹 클라이언트 API 통신 가능
        g) JSON에 직접 파일을 담을 수 없지만, ajax로 form data 전송을 가능하게 해주는 FormData 객체를 사용할 수 있다.

5. HTTP API 설계 예시 (그러나 HTTP Method는 특정 행동을 강제할 수 없기 때문에, HTTP Method를 알고 규약에 맞게 로직을 작성해야 한다)
    1) POST 기반 등록 (회원 관리 API 제공)
        a) GET - 회원목록 조회 /members
        b) POST - 회원등록 /members
            >> 클라이언트는 등록된 리소스의 URI를 모른다 (서버에서 KEY값을 생성 해 주기 때문)
        c) GET - 회원 조회 /members/{id}
        d) PUT,PATCH, POST - 회원수정 /members/{id}
        e) DELETE - 회원삭제 /members/{id}
    2) PUT 기반등록 (파일 관리 시스템) - 근데 대부분 POST를 많이 쓴다.
        a) GET - 파일목록 /files
        b) GET - 파일조회 /files/{filename}
        c) PUT - 파일등록 /files/{filename}
            >> 클라이언트가 리소스의 URI를 알고 있어야 한다. (클라이언트가 URI를 생성함)
            >> POST와의 차이점은 리소스의 URI를 누가 생성하는지의 차이
        d) DELETE - 파일삭제 /files/{filename}
        e) POST - 파일대량 등록 /files
    3) HTML FORM 사용
        a) GET, POST만 제공 (AJAX를 가지고 해결 가능)
        b) GET, POST만 사용하기 때문에 컨트롤 URI를 사용한다.
        c) GET 회원목록 /members
        d) GET 회원등록 폼 /members/new
        e) POST 회원등록 /members/new, /members
        f) GET 회원조회 /members/{id}
        g) GET 회원수정 폼 /members/{id}/edit
        h) POST 회원수정 /members/{id}/edit, /members/{id}
        i) POST 회원삭제 /members/{id}/delete
